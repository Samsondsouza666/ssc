1a) Write a LEX program to recognize valid arithmetic expression. Identifiers in the expression could be only integers and operators could be + and *. Count the identifiers & operators present and print them separately.


%{ 
int id=0, v=0,op=0, flag=0;
%}
%%
[0-9]+       { id++; printf("%s is an identifier\n", yytext); }
[+ *]        { op++; printf("%s is an operator\n", yytext); }
“(“  {v++;}
“)”  {if(v>0) v--; else flag=1;}
.            { flag=1; }
\n           { return; }
%%
main()
{
   printf("Enter an arithmetic expression: ");
   yylex();
   if ( flag==0 && id==op+1 && v==0)
   {
      printf("Valid expression\n");
      printf("The no of identifiers are %d\n", id);
      printf("The no of operators are %d\n", op);
   }
   else
      printf("Invalid expression\n");
}


Enter an arithmetic expression: 23+78*34
23 is an identifier
+ is an operator
78 is an identifier
* is an operator
34 is an identifier
Valid expression


________________


1b) Write YACC program to evaluate arithmetic expression involving operators: +, -, *, and /


%{ 
    #include "lex.yy.c"
%}
%token NUM
%left '+' '-'
%left '*' '/'
%%
stmt: exp                 { printf("Value of expression = %d\n",$$); }
      ;
exp: exp '+' exp         { $$=$1+$3; }
   | exp '-' exp         { $$=$1-$3; }
   | exp '*' exp         { $$=$1*$3; }
   | exp '/' exp         { if( $3==0 )
                            { printf("Divide by zero error!\n");
                              yyerror();
                            }
                            else
                              $$=$1/$3;
                         }
   | '(' exp ')'         { $$=$2; }
   | NUM                 { $$=$1; }
   ;
%%
main()
{
    printf("Enter expression: ");
    yyparse();
    return;
}
int yyerror()
{
    printf("Invalid expression\n");
    exit(0);
}


%{ /*Lexpgm*/
   #include "y.tab.h"
   extern int yylval;
%}
%%
[0-9]+        { yylval=atoi(yytext);  return NUM; }
[\+\-\*\/()]  return( yytext[0] );
\n            return(0);
.             yyerror();
%%


Enter expression: 5+(6*5)/(3+2)-8
Value of expression = 3
________________


2) Develop, Implement and Execute a program using YACC tool to recognize all strings
ending with b preceded by n a’s using the grammar anb (note: input n value)
%{ 
    #include "lex.yy.c"
%}
%token A B
%%
s : B
  | A s1 B
  ;
s1: A s1
  |
  ;
%%


main()
{
    printf("Enter the string: ");
    yyparse();
    printf("Valid string\n");
}
int yyerror()
{
    printf("Invalid string\n");       exit(0);
}


%{ /*Lexpgm*/
    #include "y.tab.h"
%}
%%
a    return A;
b    return B;
\n   return(0);
.    yyerror();
%%


Enter the string: aaaaab
Valid string
________________


/*3.Design, develop and implement YACC/C program to construct
Predictive / LL(1) Parsing Table for the grammar rules:
A->aBa , B->bB|e. Use this table to parse the sentence: abba$ */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char ip[20],stack[20];
int main()
{
        char m[2][3][3]={ {"aBa","E","E"},
                           {"n","bB","E"} };
        int size[2][3]= {3,1,1,1,2,1};
        int i,j,k,n,row,col,flag=0;
        int p,q,r;
        printf("\nEnter the input string: ");
        scanf("%s",ip);
        strcat(ip,"$");
        n=strlen(ip);
        stack[0]='$';
        stack[1]='A';
        i=1;
        j=0;


        printf("PARSING TABLE:\n");
        for(p=0;p<2;p++)
        {
                for(q=0;q<3;q++)
                {
                        for(r=0;r<3;r++)
                                printf("%c",m[p][q][r]);
                        printf("\t");
                }
                printf("\n");
        }


        printf("\nStack\t\tInput\n");
        printf("________\t_________\n");


        for(k=0;k<=i;k++)
                printf("%c",stack[k]);                 /* Initial stack*/
        printf("\t\t");
        for(k=j;k<=n;k++)
                printf("%c",ip[k]);                 /* input*/
        printf("\n");


        while((stack[i]!='$')&&(ip[j]!='$'))/*check stack and input both contains $ */
        {
                if(stack[i]==ip[j])           /* input and stack matches, discard stack and  
                                                        move to next input symbol */
                {
                         i--;        //pop stack
                         j++;        //advance the input pointer
                        for(k=0;k<=i;k++)
                          printf("%c",stack[k]); /*stack content */
                        printf("\t\t");
                        for(k=j;k<=n;k++)
                          printf("%c",ip[k]);                 /* input*/
                        printf("\n");
                 }
                switch(stack[i])
                {
                         case 'A': row=0;
                                 break;
                         case 'B': row=1;
                                 break;
                        default:if ((stack[i]=='$')&&(ip[j]=='$'))
                                        printf("\nSUCCESSFULL PARSING\n");
                                else
                                {
                                printf("\nUNSUCCESSFULL PARSING\n");
                                printf("ERROR-NO VALID MATCH\n");
                                }
                                exit(0);
                }
                switch(ip[j])
                {
                         case 'a': col=0;
                                 break;
                         case 'b': col=1;
                                 break;
                         case '$': col=2;
                                 break;
                }


                if(m[row][col][0]==ip[j]) /*to check top of stack and input are equal*/
                {
                         for(k=size[row][col]-1;k>=0;k--) /* to replace non terminal by its production*/
                         {
                                 stack[i]=m[row][col][k];
                                 i++;
                         }
                        i--;       /* points to top of stack*/
                }
                if(m[row][col][0]=='E')   /* to check error entry*/
                {
                        if(i>0)
                                printf("\nERROR....\n");
                        else
                                flag=1;
                        exit(0);
                }
                if(m[row][col][0]=='n') /*to check for epsilon*/
            i--;


                for(k=0;k<=i;k++)
                        printf("%c",stack[k]); /* Display stack contents*/
                printf("\t\t");
                for(k=j;k<=n;k++)
                        printf("%c",ip[k]);   /* Display input contents*/
                printf("\n");
        }
        return 0;
}


________________


4)#include<stdio.h>
#include<string.h>
int k=0,z=0,i=0,j=0,c=0;
char a[16],ac[20],stk[15],act[10];
void check();
int main()
{
puts("GRAMMAR is E->E+E \n E->E*E \n E->(E) \n E->id");
puts("\nEnter input string :");
gets(a);
c=strlen(a);
strcpy(act,"SHIFT->");
puts("stack \t input \t action");
for(k=0,i=0; j<c; k++,i++,j++)
{
if(a[j]=='i' && a[j+1]=='d')
{
stk[i]=a[j];
stk[i+1]=a[j+1];
stk[i+2]='\0';
a[j]=' ';
a[j+1]=' ';
printf("\n$%s\t%s$\t%sid",stk,a,act);
check();
}
else
{
stk[i]=a[j];
stk[i+1]='\0';
a[j]=' ';
printf("\n$%s\t%s$\t%ssymbols",stk,a,act);check();
}
}
}
void check()
{
strcpy(ac,"REDUCE TO E");
for(z=0; z<c; z++)
if(stk[z]=='i' && stk[z+1]=='d')
{
stk[z]='E';
stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
j++;
}
for(z=0; z<c; z++)
if(stk[z]=='E' && stk[z+1]=='+' && stk[z+2]=='E')
{
stk[z]='E';
stk[z+1]='\0';
stk[z+2]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
}
for(z=0; z<c; z++)
if(stk[z]=='E' && stk[z+1]=='*' && stk[z+2]=='E')
{
stk[z]='E';
stk[z+1]='\0';
stk[z+2]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
}
for(z=0; z<c; z++)
if(stk[z]=='(' && stk[z+1]=='E' && stk[z+2]==')')
{
stk[z]='E';
stk[z+1]='\0';
stk[z+1]='\0';
printf("\n$%s\t%s$\t%s",stk,a,ac);
i=i-2;
}
}
________________


/*5.Design, develop and implement a C/Java program to generate the machine code using 
Triples for the statement A = -B * (C+D) whose intermediate code in three-address form:
        T1 = -B
        T2 = C + D
        T3 = T1 * T2
        A = T3       */


#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
char tset[4][3][3]= { {"-","B","?"},
                      {"+","C","D"},
                      {"*","0","1"},
                      {"=","A","2"}
                    };
int main()
{
int row,col;
printf("Input statement is:A = -B * (C+D)\n");
printf("Intermediate code in three address form is:\nT1 = -B\n T2 = C + D\nT3 = T1 * T2\nA =T3\n");
printf("Triples are:\n");    //Display the table
for(row=0;row<4;row++)
{
    printf("%d\t", row);
    for(col=0; col<3; col++)
        printf("%c\t",tset[row][col][0]);
    printf("\n");
   
}
 printf("Machine code generated is:\n");
 for(row=0;row<4;row++)
 {
   if (tset[row][2][0]=='?')
   {
     printf("\nLD R0,%s%s",tset[row][0],tset[row][1]);
   }
   else
   {
         if(tset[row][0][0]=='+')
          {
        printf("\nLD R1,%s",tset[row][1]);
            printf("\nLD R2,%s",tset[row][2]);
            printf("\nADD R1,R1,R2");
          }
        else
        {
        if(tset[row][0][0]=='*')
            printf("\nMUL R0,R0,R1");
        else
            printf("\nST  %s,R0",tset[row][1]);
    }
   }
 }
 printf("\n");
 return 0;
}


6a)%{ #include<stdio.h> int sl=0;
int ml=0;
%}
%%
"/*"[a-zA-Z0-9' '\t\n]+"*/" ml++; "//".* sl++;
%%
main()
{
yyin=fopen("f1.c","r");
yyout=fopen("f2.c","w");
yylex();
fclose(yyin);
fclose(yyout);
printf("\n Number of single line comments are = %d\n",sl); printf("\nNumber of multiline comments are =%d\n",ml);
}
f1.c (Create this file)
#include<stido.h> int main()
{
// this is a comment printf("hello");
/* this is another comment */
}



6b)6b) Write YACC program to recognize valid identifier, operators and keywords in the given text (C program) file.
/*YACC Program*/
%{
#include <stdio.h>
#include <stdlib.h>
int id=0, dig=0, key=0, op=0;
%}
%token DIGIT ID KEY OP
%%
input:
DIGIT input { dig++; }
| ID input { id++; }
| KEY input { key++; }
| OP input {op++;}
| DIGIT { dig++; }
| ID { id++; }
| KEY { key++; }
| OP { op++;}
;
%%
#include <stdio.h>
extern int yylex();
//extern int yyparse();
extern FILE *yyin;
main()
{
     FILE *myfile = fopen("sample_input.c", "r");
     if (!myfile)
     {
          printf("can't open sample_input.c!");
return-1; }
     yyin = myfile;
     do {
yyparse();
}while(!feof(yyin));
printf("numbers = %d\n Keywords = %d\n Identifiers = %d\n operators = %d\n",dig, key,id, op);
}
void yyerror()
{
     printf("Parse error! Message: ");
exit(-1); }
/*....LEX PROGRAM...*/
%{
#include <stdio.h>
#include "y.tab.h"
extern yylval;
%}
%%
[\t] ;
[+|-|*|/|=|<|>] {printf("operator is %s\n",yytext);return OP;} [0-9]+ {yylval = atoi(yytext); printf("numbers is %d\n",yylval); return DIGIT;} int|char|bool|float|void|for|do|while|if|else|return|void {printf("keyword is %s\n",yytext);return KEY;}
[a-zA-Z0-9]+ {printf("identifier is %s\n",yytext);return ID;} .;
%%
Instructions:
1. Write Yacc program and compile it : yacc -d 6b.y
2. Write Lex program and compile it : lex 6b.l
3. Create a C file (sample_input.c)with some C program statements in it.
4. Compile C files : gcc -o 6b y.tab.c lex.yy.c –ll
5. Execute : ./6b

________________